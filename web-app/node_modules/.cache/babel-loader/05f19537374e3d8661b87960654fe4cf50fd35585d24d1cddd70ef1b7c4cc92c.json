{"ast":null,"code":"var _jsxFileName = \"/Users/alexysgromard/development/naoLibre/web-app/naolibre/src/components/LineBox/index.jsx\";\nimport React from \"react\";\n\n/**\n * LineBox component\n * @param {string} lineName - The name of the line\n * @param {string} lineStop - The stop of the line\n * @param {string} lineDescription - The description of the line\n * @param {string} lineTextOrLink - The text or link of the line (can be multiline)\n * @param {boolean} interactive - If the box is interactive or not\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LineBox extends React.Component {\n  constructor(props) {\n    super(props);\n    // Init state isOpen to false\n    this.state = {\n      isOpen: false\n    };\n    // Bind the onClick method to the current instance\n    this.onClick = this.onClick.bind(this);\n  }\n\n  /**\n   * Toggle the content opening state\n   */\n  onClick() {\n    // Change the state of isOpen\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  }\n\n  /**\n   * Render the component\n   */\n  render() {\n    const isInteractive = this.props.interactive === true;\n    const lineTextLines = isInteractive ? this.props.lineTextOrLink.split('\\n') : this.props.lineTextOrLink;\n\n    // Get the isOpen state\n    const isOpen = this.state.isOpen;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `line-box ${isInteractive ? 'interactive' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line-box-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"line-name\",\n          children: this.props.lineName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"line-description-box\",\n          children: [isInteractive && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"line-stop\",\n            children: this.props.lineStop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 43\n          }, this), !isInteractive && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"line-stop\",\n            children: this.props.lineStop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 44\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"line-stop\",\n            children: this.props.lineStop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"line-disruptions\",\n            children: this.props.lineDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), isInteractive && /*#__PURE__*/_jsxDEV(\"img\", {\n          className: `down-arrow ${isOpen ? 'open' : ''}`,\n          src: \"./assets/down-arrow.png\",\n          alt: \"Down arrow\",\n          onClick: this.onClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), isInteractive && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `content ${isOpen ? 'open' : ''}`,\n        children: lineTextLines.map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default LineBox;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","LineBox","Component","constructor","props","state","isOpen","onClick","bind","setState","prevState","render","isInteractive","interactive","lineTextLines","lineTextOrLink","split","className","children","lineName","fileName","_jsxFileName","lineNumber","columnNumber","lineStop","lineDescription","src","alt","map","line","index","Fragment"],"sources":["/Users/alexysgromard/development/naoLibre/web-app/naolibre/src/components/LineBox/index.jsx"],"sourcesContent":["import React from \"react\";\n\n/**\n * LineBox component\n * @param {string} lineName - The name of the line\n * @param {string} lineStop - The stop of the line\n * @param {string} lineDescription - The description of the line\n * @param {string} lineTextOrLink - The text or link of the line (can be multiline)\n * @param {boolean} interactive - If the box is interactive or not\n */\nclass LineBox extends React.Component {\n    constructor(props) {\n        super(props);\n        // Init state isOpen to false\n        this.state = {\n            isOpen: false\n        };\n        // Bind the onClick method to the current instance\n        this.onClick = this.onClick.bind(this);\n    }\n\n    /**\n     * Toggle the content opening state\n     */\n    onClick() {\n        // Change the state of isOpen\n        this.setState(prevState => ({\n            isOpen: !prevState.isOpen\n        }));\n    }\n\n    /**\n     * Render the component\n     */\n    render() {\n        const isInteractive = this.props.interactive === true;\n        const lineTextLines = isInteractive ? this.props.lineTextOrLink.split('\\n') : this.props.lineTextOrLink;\n\n        // Get the isOpen state\n        const isOpen = this.state.isOpen;\n\n        return (\n            <div className={`line-box ${isInteractive ? 'interactive' : ''}`}>\n                <div className=\"line-box-header\">\n                    <span className=\"line-name\">{this.props.lineName}</span>\n                    <div className=\"line-description-box\">\n                        {isInteractive && <span className=\"line-stop\">{this.props.lineStop}</span> }\n                        {!isInteractive && <span className=\"line-stop\">{this.props.lineStop}</span> }\n                        <span className=\"line-stop\">{this.props.lineStop}</span>\n                        <span className=\"line-disruptions\">{this.props.lineDescription}</span>\n                    </div>\n                    {isInteractive && <img className={`down-arrow ${isOpen ? 'open' : ''}`} src=\"./assets/down-arrow.png\" alt=\"Down arrow\" onClick={this.onClick}/>}\n                </div>\n                {isInteractive && (\n                    <div className={`content ${isOpen ? 'open' : ''}`}>\n                        {lineTextLines.map((line, index) => (\n                            <React.Fragment key={index}>\n                                {line}\n                                <br />\n                            </React.Fragment>\n                        ))}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default LineBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}